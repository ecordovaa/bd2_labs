
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include "lib.hpp" 
using namespace std;
#define TAM_PAGE 4096

void printRecord(Record& r){
    cout<< r.codigo << " ";
    for(int i= 0; i< 20; i++){
        cout<<r.nombre[i];
    }
    cout<< " " ;
    for(int i = 0; i < 15; i++){
        cout<<r.carrera[i];
    }
    cout<<" "<<r.ciclo <<" "<<r.nextRecord<< endl;
}



istream & operator >> (istream & stream, Record &r){
    stream.read((char*) &r, sizeof(r));
    return stream;
}
ostream & operator << (ostream & stream, Record &r){
    stream.write((char*) &r, sizeof(r));
    return stream;
}
//" Constantes M y K {{{1
constexpr int M = (TAM_PAGE - sizeof(long))/(sizeof(long) + sizeof(int));
constexpr int K = (TAM_PAGE - sizeof(long) - sizeof(int))/sizeof(Record);

 
//" Binary search maleado {{{1
int closeBinarySearch(int arr[], int l, int r ,int x){
    if(r > l){
        int mid = l+(r-l)/2;
        if(arr[mid] == x){
            return mid;
        }
        if(arr[mid] > x)
            return closeBinarySearch(arr, l, mid -1 , x);
        return closeBinarySearch(arr, mid + l, r, x);
    }
    if(l==r)
        return l;
    else 
        return 0;
}


//" Bucket {{{1
struct Bucket{
    int keys[M];
    long pages[M+1];
    
    //Bucket() {{{2 
    Bucket(){
        for(int i = 0 ; i< M; i++){
            keys[i] = pages[i+1]  = -1;
        }
        pages[0] = 0;
    } 
      
    //" Bucket( fileName, positi on) {{{2
    void loadBucket(string fileName, long position=0){
        fstream file;
        file.open(fileName, fstream::in | fstream::binary);
        file.seekg(position, ios::beg);
        for(int i = 0; i < 2*M +1;i++){
            if(!i%2)
                file.read((char*)&pages[i/2], sizeof(pages[i/2]));
            else 
                file.read((char*)&keys[i/2], sizeof(pages[i/2]));
        }
        file.close();
    } 
    //" findNextBucket(key) {{{2
    long findNextBucket(int key){
        return pages[closeBinarySearch(keys,0,M-1,key)]; 
    }
};
    
//" DataPage {{{1
struct DataPage{
    Record records[K];
    int size;
    long nextPage = -1;
    
};
  
//  " isam {{{1
class Isam{
    private:
        string fileName = "data.dat";
        string indexName = "index.dat";
        string index2Name = "index2.dat";
        string index3Name = "index3.dat";
    public:
        bool add(Record record){
            fstream file;
            int key = record.codigo;

            // agregas el nuevo registro al final del archivo
            file.open(fileName, ios::app | ios::binary);
            long position = file.tellg(); //consigo la posicion del registro
            file.write((char*)&record, sizeof(Record));
            file.close();


            return true;
        }
        void readAll(){
            fstream data;
            data.open(fileName, fstream::in | fstream::binary);
            data.seekg(0, ios::beg);
            Record temp;
            while(data >> temp){
                printRecord(temp);
            }
            data.close();
        }

};

//"  main {{{1
int main(){
    Isam isam;

    //for(int i = 0; i < 32 ; i++){
    //    isam.add(autoGeneratedDataset[i]);
    //}
    //isam.readAll();
    Bucket nuevo;
    nuevo.loadBucket("index.dat");
    for(int i = 0; i < M ; i++){
        cout<<nuevo.keys[i]<< " ";
    }
    cout << endl;

    cout<< "M: "<<M<<endl;
    cout <<nuevo.findNextBucket(3)<<endl;

    return 0;
}
